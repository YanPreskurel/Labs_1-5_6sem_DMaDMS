alter session set "_ORACLE_SCRIPT"=true;  

CREATE TABLE C##prod.EmployeeRole (
    RoleID INT NOT NULL PRIMARY KEY,
    RoleName VARCHAR(55) NOT NULL
)

CREATE TABLE C##prod.EmployeeType (
    EmployeeTypeID INT NOT NULL PRIMARY KEY,
    EmployeeTypeName VARCHAR(55) NOT NULL,
    EmployeeTypeDescription VARCHAR(1000) NOT NULL
)

CREATE TABLE C##prod.HistoryType (
    HistoryTypeID INT NOT NULL PRIMARY KEY,
    HistoryTypeDescription VARCHAR(255) NOT NULL,
    SomeField VARCHAR(255) NOT NULL
)

CREATE TABLE C##prod.TaskType (
    TaskTypeID INT NOT NULL PRIMARY KEY,
    TaskTypeDescription VARCHAR(255) NOT NULL,
    SomeField VARCHAR(255) NOT NULL
)

CREATE TABLE C##prod.Task (
    TaskID INT NOT NULL PRIMARY KEY,
    TaskTypeID INT NOT NULL,
    TaskName VARCHAR(255) NOT NULL,
    TaskDescription VARCHAR(3000) NOT NULL,
    DateFinish DATE NOT NULL,
    FOREIGN KEY (TaskTypeID) REFERENCES C##prod.TaskType(TaskTypeID)
)

CREATE TABLE C##prod.Investor (
    InvestorID INT NOT NULL PRIMARY KEY,
    InvestorFirstName VARCHAR(255) NOT NULL,
    InvestorSecondName VARCHAR(255) NOT NULL,
    InvestorContactInformation VARCHAR(3000) NOT NULL
)

CREATE TABLE C##prod.Company (
    CompanyID INT NOT NULL PRIMARY KEY,
    CompanyName VARCHAR(255) NOT NULL,
    CompanyDescription VARCHAR(3000) NOT NULL,
    CompanyAddress VARCHAR (1000) NOT NULL,
    CompanyContactInformation VARCHAR (1000) NOT NULL,
    SomeField VARCHAR(255) NOT NULL
)

CREATE TABLE C##prod.Investment (
    InvestmentID INT NOT NULL PRIMARY KEY,
    CompanyID INT NOT NULL,
    InvestorID INT NOT NULL,
    InvestmentSum INT NOT NULL,
    FOREIGN KEY (CompanyID) REFERENCES C##prod.Company(CompanyID),
    FOREIGN KEY (InvestorID) REFERENCES C##prod.Investor(InvestorID)
)

CREATE TABLE C##prod.Department (
    DepartmentID INT NOT NULL PRIMARY KEY,
    CompanyID INT NOT NULL,
    DepartmentName VARCHAR(255) NOT NULL,
    DepartmentDescription VARCHAR(3000) NOT NULL,
    FOREIGN KEY (CompanyID) REFERENCES C##prod.Company(CompanyID)
)

CREATE TABLE C##prod.Client (
    ClientID INT NOT NULL PRIMARY KEY,
    ClientName VARCHAR(255) NOT NULL,
    ClientContactInformation VARCHAR(3000) NOT NULL,
    SomeField VARCHAR(255) NOT NULL
)

CREATE TABLE C##prod.OrderClient (
    OrderClientID INT NOT NULL PRIMARY KEY,
    ProjectID INT NOT NULL,
    CLientID INT NOT NULL,
    OrderClientName VARCHAR(255) NOT NULL,
    OrderClientDescription VARCHAR(3000) NOT NULL,
    OrderClientPrice INT NOT NULL,
    OrderClientDate DATE NOT NULL,
    FOREIGN KEY (CLientID) REFERENCES C##prod.CLient(CLientID)
)

CREATE TABLE C##prod.Project (
    ProjectID INT NOT NULL PRIMARY KEY,
    CompanyID INT NOT NULL,
    CLientID INT NOT NULL,
    ProjectName VARCHAR(255) NOT NULL,
    ProjectDescription VARCHAR(3000) NOT NULL,
    DateStart DATE NOT NULL,
    DateFinish DATE NOT NULL,
    FOREIGN KEY (CompanyID) REFERENCES C##prod.Company(CompanyID),
    FOREIGN KEY (CLientID) REFERENCES C##prod.CLient(CLientID)
)

//ALTER TABLE OrderClient
//ADD FOREIGN KEY (ProjectID) REFERENCES Project(ProjectID);

CREATE TABLE C##prod.Employee (
    EmployeeID INT NOT NULL PRIMARY KEY,
    EmployeeTypeID INT NOT NULL,
    EmployeeRoleID INT NOT NULL,
    DepartmentID INT NOT NULL,
    CompanyID INT NOT NULL,
    EmployeeFirstName VARCHAR(255) NOT NULL,
    EmployeeSecondName VARCHAR(255) NOT NULL,
    EmployeeSalary INT NOT NULL,
    EmployeeContactInformation VARCHAR(3000) NOT NULL,
    Login VARCHAR(255) NOT NULL,
    Password VARCHAR(255) NOT NULL,
    FOREIGN KEY (EmployeeTypeID) REFERENCES C##prod.EmployeeType(EmployeeTypeID),
    FOREIGN KEY (EmployeeRoleID) REFERENCES C##prod.EmployeeRole(RoleID),
    FOREIGN KEY (CompanyID) REFERENCES C##prod.Company(CompanyID),
    FOREIGN KEY (DepartmentID) REFERENCES C##prod.Department(DepartmentID)
)

CREATE TABLE C##prod.EmployeeTask (
    EmployeeID INT NOT NULL,
    TaskID INT NOT NULL,
    FOREIGN KEY (EmployeeID) REFERENCES C##prod.Employee(EmployeeID),
    FOREIGN KEY (TaskID) REFERENCES C##prod.Task(TaskID),
    PRIMARY KEY (EmployeeID, TaskID),
    SomeField VARCHAR(255) NOT NULL
)

CREATE TABLE C##prod.EmployeeTaskHistory (
    HistoryID INT NOT NULL PRIMARY KEY,
    EmployeeID INT NOT NULL,
    TaskID INT NOT NULL,
    HistoryTypeID INT NOT NULL,
    FOREIGN KEY (TaskID) REFERENCES C##prod.Task(TaskID),
    FOREIGN KEY (EmployeeID) REFERENCES C##prod.Employee(EmployeeID),
    FOREIGN KEY (HistoryTypeID) REFERENCES C##prod.HistoryType(HistoryTypeID)
)

create table C##prod.MyTable
(
    id number(10) GENERATED BY DEFAULT ON NULL AS IDENTITY,
    val number(10),
    CONSTRAINT id_pk PRIMARY KEY (id)
)

create or replace procedure C##prod.insertMyTable(new_val in number)
is
begin
    insert into C##prod.MyTable (val) values(new_val);
end;

create or replace function C##prod.getReward(salary in number, percent in number)
return double precision
is
    ret double precision;
begin
    if (salary < 0) then
        raise_application_error(-20001, 'Salary cannot be negative.');
    end if;
    
    if (percent < 0) then
        raise_application_error(-20001, 'Percent cannot be negative.');
    end if;
    
    ret := ( 1 + percent / 100) * 12 * salary;
    
    return ret;
end;

CREATE UNIQUE INDEX C##prod.indx_department_name ON C##prod.Department(lower(DepartmentName))


CREATE OR REPLACE PROCEDURE C##prod.my_procedure AS
  v_variable VARCHAR2(100);
BEGIN
  -- Присваиваем переменной значение "Вторая процедура"
  v_variable := 'Вторая процедура';
  DBMS_OUTPUT.PUT_LINE('Значение переменной во второй процедуре: ' || v_variable);
END my_procedure;
